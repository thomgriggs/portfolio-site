{"version":3,"file":"devAction2.js","sources":["../../src/_internal/cli/server/devServer.ts","../../src/_internal/cli/actions/dev/devAction.ts"],"sourcesContent":["import {type ReactCompilerConfig, type UserViteConfig} from '@sanity/cli'\nimport {type ViteDevServer} from 'vite'\n\nimport {debug} from './debug'\nimport {extendViteConfigWithUserConfig, getViteConfig} from './getViteConfig'\nimport {writeSanityRuntime} from './runtime'\n\nexport interface DevServerOptions {\n  cwd: string\n  basePath: string\n  staticPath: string\n\n  httpPort: number\n  httpHost?: string\n  projectName?: string\n\n  reactStrictMode: boolean\n  reactCompiler: ReactCompilerConfig | undefined\n  vite?: UserViteConfig\n  entry?: string\n  isApp?: boolean\n}\n\nexport interface DevServer {\n  server: ViteDevServer\n  close(): Promise<void>\n}\n\nexport async function startDevServer(options: DevServerOptions): Promise<DevServer> {\n  const {\n    cwd,\n    httpPort,\n    httpHost,\n    basePath,\n    reactStrictMode,\n    vite: extendViteConfig,\n    reactCompiler,\n    entry,\n    isApp,\n  } = options\n\n  debug('Writing Sanity runtime files')\n  await writeSanityRuntime({cwd, reactStrictMode, watch: true, basePath, entry, isApp})\n\n  debug('Resolving vite config')\n  const mode = 'development'\n\n  let viteConfig = await getViteConfig({\n    basePath,\n    mode: 'development',\n    server: {port: httpPort, host: httpHost},\n    cwd,\n    reactCompiler,\n    isApp,\n  })\n\n  // Extend Vite configuration with user-provided config\n  if (extendViteConfig) {\n    viteConfig = await extendViteConfigWithUserConfig(\n      {command: 'serve', mode},\n      viteConfig,\n      extendViteConfig,\n    )\n  }\n\n  debug('Creating vite server')\n  const {createServer} = await import('vite')\n  const server = await createServer(viteConfig)\n\n  debug('Listening on specified port')\n  await server.listen()\n\n  return {\n    server,\n    close: () => server.close(),\n  }\n}\n","/* eslint-disable max-statements */\nimport path from 'node:path'\n\nimport {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliConfig,\n  type CliOutputter,\n} from '@sanity/cli'\nimport {type SanityProject} from '@sanity/client'\nimport chalk from 'chalk'\nimport {info} from 'log-symbols'\nimport semver from 'semver'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {debug as debugIt} from '../../debug'\nimport {type DevServerOptions, startDevServer} from '../../server/devServer'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {compareDependencyVersions} from '../../util/compareDependencyVersions'\nimport {isInteractive} from '../../util/isInteractive'\nimport {getPackageManagerChoice} from '../../util/packageManager/packageManagerChoice'\nimport {upgradePackages} from '../../util/packageManager/upgradePackages'\nimport {getSharedServerConfig, gracefulServerDeath} from '../../util/servers'\nimport {shouldAutoUpdate} from '../../util/shouldAutoUpdate'\nimport {getTimer} from '../../util/timing'\n\nexport interface StartDevServerCommandFlags {\n  'host'?: string\n  'port'?: string\n  'load-in-dashboard'?: boolean\n  'auto-updates'?: boolean\n  'force'?: boolean\n}\n\nconst debug = debugIt.extend('dev')\n\nconst getDefaultCoreURL = ({\n  organizationId,\n  url,\n}: {\n  organizationId: string\n  url: string\n}): string => {\n  const params = new URLSearchParams({\n    url,\n  })\n\n  return process.env.SANITY_INTERNAL_ENV === 'staging'\n    ? `https://sanity.work/@${organizationId}?${params.toString()}`\n    : `https://sanity.io/@${organizationId}?${params.toString()}`\n}\n\nconst getCoreApiURL = (): string => {\n  return process.env.SANITY_INTERNAL_ENV === 'staging' ? 'https://sanity.work' : 'https://sanity.io'\n}\n\nexport const getCoreURL = async ({\n  fetchFn = globalThis.fetch,\n  timeout = 5000,\n  organizationId,\n  url,\n}: {\n  fetchFn?: typeof globalThis.fetch\n  timeout?: number\n  organizationId: string\n  url: string\n}): Promise<string> => {\n  const abortController = new AbortController()\n  // Wait for 5 seconds before aborting the request\n  const timer = setTimeout(() => abortController.abort(), timeout)\n  try {\n    const queryParams = new URLSearchParams({\n      organizationId,\n      url,\n    })\n\n    const res = await fetchFn(\n      `${getCoreApiURL()}/api/dashboard/mode/development/resolve-url?${queryParams.toString()}`,\n      {\n        signal: abortController.signal,\n      },\n    )\n\n    if (!res.ok) {\n      debug(`Failed to fetch core URL: ${res.statusText}`)\n      return getDefaultCoreURL({organizationId, url})\n    }\n\n    const body = await res.json()\n    return body.url\n  } catch (err) {\n    debug(`Failed to fetch core URL: ${err.message}`)\n    return getDefaultCoreURL({organizationId, url})\n  } finally {\n    clearTimeout(timer)\n  }\n}\n\n/**\n * Gets the core URL from API or uses the default core URL\n */\nexport const getCoreAppURL = async ({\n  organizationId,\n  httpHost = 'localhost',\n  httpPort = 3333,\n}: {\n  organizationId: string\n  httpHost?: string\n  httpPort?: number\n}): Promise<string> => {\n  const url = await getCoreURL({\n    organizationId,\n    url: `http://${httpHost}:${httpPort}`,\n  })\n\n  // <core-app-url>/<orgniazationId>?dev=<dev-server-url>\n  return url\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  // Using slice(1) to remove the first argument, which is the command `dev` path to the CLI\n  return yargs(hideBin(args.argv || process.argv).slice(1))\n    .options('host', {type: 'string'})\n    .options('port', {type: 'number'})\n    .options('auto-updates', {type: 'boolean'})\n    .option('load-in-dashboard', {type: 'boolean', default: false}).argv\n}\n\nexport default async function startSanityDevServer(\n  args: CliCommandArguments<StartDevServerCommandFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const timers = getTimer()\n  const flags = await parseCliFlags(args)\n  const {output, apiClient, workDir, cliConfig, prompt, cliPackageManager} = context\n\n  const {loadInDashboard} = flags\n\n  timers.start('checkStudioDependencyVersions')\n  await checkStudioDependencyVersions(workDir)\n  timers.end('checkStudioDependencyVersions')\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  if ((await checkRequiredDependencies(context)).didInstall) {\n    return\n  }\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  const {didInstall, installedSanityVersion} = await checkRequiredDependencies(context)\n  if (didInstall) {\n    return\n  }\n\n  const autoUpdatesEnabled = shouldAutoUpdate({flags, cliConfig})\n  const autoUpdatesImports = {}\n  if (autoUpdatesEnabled) {\n    // Get the clean version without build metadata: https://semver.org/#spec-item-10\n    const cleanSanityVersion = semver.parse(installedSanityVersion)?.version\n    if (!cleanSanityVersion) {\n      throw new Error(`Failed to parse installed Sanity version: ${installedSanityVersion}`)\n    }\n\n    const sanityDependencies = [\n      {name: 'sanity', version: cleanSanityVersion},\n      {name: '@sanity/vision', version: cleanSanityVersion},\n    ]\n\n    output.print(`${info} Running with auto-updates enabled`)\n    // Check local versions against deployed versions\n    let result: Awaited<ReturnType<typeof compareDependencyVersions>> | undefined\n    try {\n      result = await compareDependencyVersions(sanityDependencies, workDir)\n    } catch (err) {\n      console.warn(\n        new Error('Failed to compare local versions against auto-updating versions', {\n          cause: err,\n        }),\n      )\n    }\n    if (result?.length) {\n      const message =\n        `The following local package versions are different from the versions currently served at runtime.\\n` +\n        `When using auto updates, we recommend that you run with the same versions locally as will be used when deploying. \\n\\n` +\n        `${result.map((mod) => ` - ${mod.pkg} (local version: ${mod.installed}, runtime version: ${mod.remote})`).join('\\n')} \\n\\n`\n\n      // mismatch between local and auto-updating dependencies\n      if (isInteractive) {\n        const shouldUpgrade = await prompt.single({\n          type: 'confirm',\n          message: chalk.yellow(`${message}Do you want to upgrade local versions?`),\n          default: true,\n        })\n        if (shouldUpgrade) {\n          await upgradePackages(\n            {\n              packageManager: (await getPackageManagerChoice(workDir, {interactive: false})).chosen,\n              packages: result.map((res) => [res.pkg, res.remote]),\n            },\n            context,\n          )\n        }\n      } else {\n        // In this case we warn the user but we don't ask them if they want to upgrade because it's not interactive.\n        output.print(chalk.yellow(message))\n      }\n    }\n  }\n\n  // Try to load CLI configuration from sanity.cli.(js|ts)\n  const config = getDevServerConfig({flags, workDir, cliConfig, output})\n\n  const projectId = cliConfig?.api?.projectId\n  let organizationId: string | undefined | null\n\n  if (loadInDashboard) {\n    if (!projectId) {\n      output.error('Project Id is required to load in dashboard')\n      process.exit(1)\n    }\n\n    const client = apiClient({\n      requireUser: true,\n      requireProject: true,\n    })\n\n    try {\n      const project = await client.request<SanityProject>({uri: `/projects/${projectId}`})\n      organizationId = project.organizationId\n    } catch (err) {\n      debug(`Failed to get organization Id from project Id: ${err}`)\n      output.error('Failed to get organization Id from project Id')\n      process.exit(1)\n    }\n  }\n\n  try {\n    const startTime = Date.now()\n    const spinner = output.spinner('Starting dev server').start()\n    const {server} = await startDevServer({...config})\n\n    const {info: loggerInfo} = server.config.logger\n    const {port} = server.config.server\n    const httpHost = config.httpHost || 'localhost'\n\n    spinner.succeed()\n\n    if (loadInDashboard) {\n      if (!organizationId) {\n        output.error('Organization Id not found for project')\n        process.exit(1)\n      }\n\n      output.print(`Dev server started on ${config.httpPort} port`)\n      output.print(`View your app in the Sanity dashboard here:`)\n      output.print(\n        chalk.blue(\n          chalk.underline(\n            await getCoreAppURL({\n              organizationId,\n              httpHost: config.httpHost,\n              httpPort: config.httpPort,\n            }),\n          ),\n        ),\n      )\n    } else {\n      const startupDuration = Date.now() - startTime\n      const url = `http://${httpHost || 'localhost'}:${port}${config.basePath}`\n      const appType = 'Sanity Studio'\n\n      loggerInfo(\n        `${appType} ` +\n          `using ${chalk.cyan(`vite@${require('vite/package.json').version}`)} ` +\n          `ready in ${chalk.cyan(`${Math.ceil(startupDuration)}ms`)} ` +\n          `and running at ${chalk.cyan(url)}`,\n      )\n    }\n  } catch (err) {\n    debug(`Failed to start dev server: ${err}`)\n    gracefulServerDeath('dev', config.httpHost, config.httpPort, err)\n  }\n}\n\nexport function getDevServerConfig({\n  flags,\n  workDir,\n  cliConfig,\n  output,\n}: {\n  flags: {host?: string; port?: number}\n  workDir: string\n  cliConfig?: CliConfig\n  output: CliOutputter\n}): Omit<DevServerOptions, 'spinner'> {\n  const configSpinner = output.spinner('Checking configuration files...')\n  const baseConfig = getSharedServerConfig({\n    flags: {\n      host: flags.host,\n      port: flags.port,\n    },\n    workDir,\n    cliConfig,\n  })\n  configSpinner.succeed()\n\n  const env = process.env\n  const reactStrictMode = env.SANITY_STUDIO_REACT_STRICT_MODE\n    ? env.SANITY_STUDIO_REACT_STRICT_MODE === 'true'\n    : Boolean(cliConfig?.reactStrictMode)\n\n  if (env.SANITY_STUDIO_BASEPATH && cliConfig?.project?.basePath) {\n    output.warn(\n      `Overriding configured base path (${cliConfig.project.basePath}) with value from environment variable (${env.SANITY_STUDIO_BASEPATH})`,\n    )\n  }\n\n  return {\n    ...baseConfig,\n    staticPath: path.join(workDir, 'static'),\n    reactStrictMode,\n    reactCompiler: cliConfig && 'reactCompiler' in cliConfig ? cliConfig.reactCompiler : undefined,\n  }\n}\n"],"names":["startDevServer","options","cwd","httpPort","httpHost","basePath","reactStrictMode","vite","extendViteConfig","reactCompiler","entry","isApp","debug","writeSanityRuntime","watch","mode","viteConfig","getViteConfig","server","port","host","extendViteConfigWithUserConfig","command","createServer","listen","close","debugIt","extend","getDefaultCoreURL","organizationId","url","params","URLSearchParams","process","env","SANITY_INTERNAL_ENV","toString","getCoreApiURL","getCoreURL","fetchFn","globalThis","fetch","timeout","abortController","AbortController","timer","setTimeout","abort","queryParams","res","signal","ok","json","statusText","err","message","clearTimeout","getCoreAppURL","parseCliFlags","args","yargs","hideBin","argv","slice","type","option","default","startSanityDevServer","context","timers","getTimer","flags","output","apiClient","workDir","cliConfig","prompt","loadInDashboard","start","checkStudioDependencyVersions","end","checkRequiredDependencies","didInstall","installedSanityVersion","shouldAutoUpdate","cleanSanityVersion","semver","parse","version","Error","sanityDependencies","name","print","info","result","compareDependencyVersions","console","warn","cause","length","map","mod","pkg","installed","remote","join","isInteractive","single","chalk","yellow","upgradePackages","packageManager","getPackageManagerChoice","interactive","chosen","packages","config","getDevServerConfig","projectId","api","error","exit","client","requireUser","requireProject","request","uri","startTime","Date","now","spinner","loggerInfo","logger","succeed","blue","underline","startupDuration","cyan","require","Math","ceil","gracefulServerDeath","configSpinner","baseConfig","getSharedServerConfig","SANITY_STUDIO_REACT_STRICT_MODE","Boolean","SANITY_STUDIO_BASEPATH","project","staticPath","path","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,eAAsBA,eAAeC,SAA+C;AAClF,QAAM;AAAA,IACJC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC,MAAMC;AAAAA,IACNC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,EAAAA,IACEV;AAEJW,gBAAM,8BAA8B,GACpC,MAAMC,2BAAmB;AAAA,IAACX;AAAAA,IAAKI;AAAAA,IAAiBQ,OAAO;AAAA,IAAMT;AAAAA,IAAUK;AAAAA,IAAOC;AAAAA,EAAAA,CAAM,GAEpFC,QAAAA,MAAM,uBAAuB;AAC7B,QAAMG,OAAO;AAEb,MAAIC,aAAa,MAAMC,sBAAc;AAAA,IACnCZ;AAAAA,IACAU,MAAM;AAAA,IACNG,QAAQ;AAAA,MAACC,MAAMhB;AAAAA,MAAUiB,MAAMhB;AAAAA,IAAAA;AAAAA,IAC/BF;AAAAA,IACAO;AAAAA,IACAE;AAAAA,EAAAA,CACD;AAGGH,uBACFQ,aAAa,MAAMK,uCACjB;AAAA,IAACC,SAAS;AAAA,IAASP;AAAAA,EAAAA,GACnBC,YACAR,gBACF,IAGFI,QAAAA,MAAM,sBAAsB;AAC5B,QAAM;AAAA,IAACW;AAAAA,EAAAA,IAAgB,MAAM,OAAO,MAAM,GACpCL,SAAS,MAAMK,aAAaP,UAAU;AAE5CJ,SAAAA,QAAAA,MAAM,6BAA6B,GACnC,MAAMM,OAAOM,UAEN;AAAA,IACLN;AAAAA,IACAO,OAAOA,MAAMP,OAAOO,MAAAA;AAAAA,EAAM;AAE9B;ACxCA,MAAMb,QAAQc,UAAAA,MAAQC,OAAO,KAAK,GAE5BC,oBAAoBA,CAAC;AAAA,EACzBC;AAAAA,EACAC;AAIF,MAAc;AACZ,QAAMC,SAAS,IAAIC,gBAAgB;AAAA,IACjCF;AAAAA,EAAAA,CACD;AAED,SAAOG,QAAQC,IAAIC,wBAAwB,YACvC,wBAAwBN,cAAc,IAAIE,OAAOK,UAAU,KAC3D,sBAAsBP,cAAc,IAAIE,OAAOK,UAAU;AAC/D,GAEMC,gBAAgBA,MACbJ,QAAQC,IAAIC,wBAAwB,YAAY,wBAAwB,qBAGpEG,aAAa,OAAO;AAAA,EAC/BC,UAAUC,WAAWC;AAAAA,EACrBC,UAAU;AAAA,EACVb;AAAAA,EACAC;AAMF,MAAuB;AACrB,QAAMa,kBAAkB,IAAIC,gBAAAA,GAEtBC,QAAQC,WAAW,MAAMH,gBAAgBI,MAAAA,GAASL,OAAO;AAC/D,MAAI;AACF,UAAMM,cAAc,IAAIhB,gBAAgB;AAAA,MACtCH;AAAAA,MACAC;AAAAA,IAAAA,CACD,GAEKmB,MAAM,MAAMV,QAChB,GAAGF,eAAe,+CAA+CW,YAAYZ,SAAAA,CAAU,IACvF;AAAA,MACEc,QAAQP,gBAAgBO;AAAAA,IAAAA,CAE5B;AAEA,WAAKD,IAAIE,MAKI,MAAMF,IAAIG,KAAAA,GACXtB,OALVlB,MAAM,6BAA6BqC,IAAII,UAAU,EAAE,GAC5CzB,kBAAkB;AAAA,MAACC;AAAAA,MAAgBC;AAAAA,IAAAA,CAAI;AAAA,EAKlD,SAASwB,KAAK;AACZ1C,WAAAA,MAAM,6BAA6B0C,IAAIC,OAAO,EAAE,GACzC3B,kBAAkB;AAAA,MAACC;AAAAA,MAAgBC;AAAAA,IAAAA,CAAI;AAAA,EAChD,UAAA;AACE0B,iBAAaX,KAAK;AAAA,EACpB;AACF,GAKaY,gBAAgB,OAAO;AAAA,EAClC5B;AAAAA,EACAzB,WAAW;AAAA,EACXD,WAAW;AAKb,MACc,MAAMmC,WAAW;AAAA,EAC3BT;AAAAA,EACAC,KAAK,UAAU1B,QAAQ,IAAID,QAAQ;AACrC,CAAC;AAMH,SAASuD,cAAcC,MAAyB;AAE9C,SAAOC,uBAAMC,QAAAA,QAAQF,KAAKG,QAAQ7B,QAAQ6B,IAAI,EAAEC,MAAM,CAAC,CAAC,EACrD9D,QAAQ,QAAQ;AAAA,IAAC+D,MAAM;AAAA,EAAA,CAAS,EAChC/D,QAAQ,QAAQ;AAAA,IAAC+D,MAAM;AAAA,EAAA,CAAS,EAChC/D,QAAQ,gBAAgB;AAAA,IAAC+D,MAAM;AAAA,EAAA,CAAU,EACzCC,OAAO,qBAAqB;AAAA,IAACD,MAAM;AAAA,IAAWE,SAAS;AAAA,EAAA,CAAM,EAAEJ;AACpE;AAEA,eAA8BK,qBAC5BR,MACAS,SACe;AACf,QAAMC,SAASC,OAAAA,SAAAA,GACTC,QAAQ,MAAMb,cAAcC,IAAI,GAChC;AAAA,IAACa;AAAAA,IAAQC;AAAAA,IAAWC;AAAAA,IAASC;AAAAA,IAAWC;AAAAA,EAAyB,IAAIR,SAErE;AAAA,IAACS;AAAAA,EAAAA,IAAmBN;AAQ1B,MANAF,OAAOS,MAAM,+BAA+B,GAC5C,MAAMC,gBAAAA,8BAA8BL,OAAO,GAC3CL,OAAOW,IAAI,+BAA+B,IAIrC,MAAMC,gBAAAA,0BAA0Bb,OAAO,GAAGc;AAC7C;AAKF,QAAM;AAAA,IAACA;AAAAA,IAAYC;AAAAA,EAAAA,IAA0B,MAAMF,gBAAAA,0BAA0Bb,OAAO;AACpF,MAAIc;AACF;AAKF,MAF2BE,iBAAAA,iBAAiB;AAAA,IAACb;AAAAA,IAAOI;AAAAA,EAAAA,CAAU,GAEtC;AAEtB,UAAMU,qBAAqBC,gBAAAA,QAAOC,MAAMJ,sBAAsB,GAAGK;AACjE,QAAI,CAACH;AACH,YAAM,IAAII,MAAM,6CAA6CN,sBAAsB,EAAE;AAGvF,UAAMO,qBAAqB,CACzB;AAAA,MAACC,MAAM;AAAA,MAAUH,SAASH;AAAAA,IAAAA,GAC1B;AAAA,MAACM,MAAM;AAAA,MAAkBH,SAASH;AAAAA,IAAAA,CAAmB;AAGvDb,WAAOoB,MAAM,GAAGC,WAAAA,IAAI,oCAAoC;AAExD,QAAIC;AACJ,QAAI;AACFA,eAAS,MAAMC,iBAAAA,0BAA0BL,oBAAoBhB,OAAO;AAAA,IACtE,SAASpB,KAAK;AACZ0C,cAAQC,KACN,IAAIR,MAAM,mEAAmE;AAAA,QAC3ES,OAAO5C;AAAAA,MAAAA,CACR,CACH;AAAA,IACF;AACA,QAAIwC,QAAQK,QAAQ;AAClB,YAAM5C,UACJ;AAAA;AAAA;AAAA,EAEGuC,OAAOM,IAAKC,CAAAA,QAAQ,MAAMA,IAAIC,GAAG,oBAAoBD,IAAIE,SAAS,sBAAsBF,IAAIG,MAAM,GAAG,EAAEC,KAAK;AAAA,CAAI,CAAC;AAAA;AAAA;AAGlHC,gCACoB,MAAM9B,OAAO+B,OAAO;AAAA,QACxC3C,MAAM;AAAA,QACNT,SAASqD,eAAAA,QAAMC,OAAO,GAAGtD,OAAO,wCAAwC;AAAA,QACxEW,SAAS;AAAA,MAAA,CACV,KAEC,MAAM4C,gBAAAA,gBACJ;AAAA,QACEC,iBAAiB,MAAMC,gBAAAA,wBAAwBtC,SAAS;AAAA,UAACuC,aAAa;AAAA,QAAA,CAAM,GAAGC;AAAAA,QAC/EC,UAAUrB,OAAOM,IAAKnD,CAAAA,QAAQ,CAACA,IAAIqD,KAAKrD,IAAIuD,MAAM,CAAC;AAAA,MAAA,GAErDpC,OACF,IAIFI,OAAOoB,MAAMgB,eAAAA,QAAMC,OAAOtD,OAAO,CAAC;AAAA,IAEtC;AAAA,EACF;AAGA,QAAM6D,SAASC,mBAAmB;AAAA,IAAC9C;AAAAA,IAAOG;AAAAA,IAASC;AAAAA,IAAWH;AAAAA,EAAAA,CAAO,GAE/D8C,YAAY3C,WAAW4C,KAAKD;AAClC,MAAIzF;AAEJ,MAAIgD,iBAAiB;AACdyC,kBACH9C,OAAOgD,MAAM,6CAA6C,GAC1DvF,QAAQwF,KAAK,CAAC;AAGhB,UAAMC,SAASjD,UAAU;AAAA,MACvBkD,aAAa;AAAA,MACbC,gBAAgB;AAAA,IAAA,CACjB;AAED,QAAI;AAEF/F,wBADgB,MAAM6F,OAAOG,QAAuB;AAAA,QAACC,KAAK,aAAaR,SAAS;AAAA,MAAA,CAAG,GAC1DzF;AAAAA,IAC3B,SAASyB,KAAK;AACZ1C,YAAM,kDAAkD0C,GAAG,EAAE,GAC7DkB,OAAOgD,MAAM,+CAA+C,GAC5DvF,QAAQwF,KAAK,CAAC;AAAA,IAChB;AAAA,EACF;AAEA,MAAI;AACF,UAAMM,YAAYC,KAAKC,OACjBC,UAAU1D,OAAO0D,QAAQ,qBAAqB,EAAEpD,SAChD;AAAA,MAAC5D;AAAAA,IAAAA,IAAU,MAAMlB,eAAe;AAAA,MAAC,GAAGoH;AAAAA,IAAAA,CAAO,GAE3C;AAAA,MAACvB,MAAMsC;AAAAA,IAAAA,IAAcjH,OAAOkG,OAAOgB,QACnC;AAAA,MAACjH;AAAAA,IAAAA,IAAQD,OAAOkG,OAAOlG,QACvBd,WAAWgH,OAAOhH,YAAY;AAIpC,QAFA8H,QAAQG,WAEJxD;AACGhD,yBACH2C,OAAOgD,MAAM,uCAAuC,GACpDvF,QAAQwF,KAAK,CAAC,IAGhBjD,OAAOoB,MAAM,yBAAyBwB,OAAOjH,QAAQ,OAAO,GAC5DqE,OAAOoB,MAAM,6CAA6C,GAC1DpB,OAAOoB,MACLgB,eAAAA,QAAM0B,KACJ1B,eAAAA,QAAM2B,UACJ,MAAM9E,cAAc;AAAA,QAClB5B;AAAAA,QACAzB,UAAUgH,OAAOhH;AAAAA,QACjBD,UAAUiH,OAAOjH;AAAAA,MAAAA,CAClB,CACH,CACF,CACF;AAAA,SACK;AACL,YAAMqI,kBAAkBR,KAAKC,IAAAA,IAAQF,WAC/BjG,MAAM,UAAU1B,YAAY,WAAW,IAAIe,IAAI,GAAGiG,OAAO/G,QAAQ;AAGvE8H,iBACE,uBACWvB,eAAAA,QAAM6B,KAAK,QAAQC,QAAQ,mBAAmB,EAAElD,OAAO,EAAE,CAAC,aACvDoB,eAAAA,QAAM6B,KAAK,GAAGE,KAAKC,KAAKJ,eAAe,CAAC,IAAI,CAAC,mBACvC5B,eAAAA,QAAM6B,KAAK3G,GAAG,CAAC,EACrC;AAAA,IACF;AAAA,EACF,SAASwB,KAAK;AACZ1C,UAAM,+BAA+B0C,GAAG,EAAE,GAC1CuF,QAAAA,oBAAoB,OAAOzB,OAAOhH,UAAUgH,OAAOjH,UAAUmD,GAAG;AAAA,EAClE;AACF;AAEO,SAAS+D,mBAAmB;AAAA,EACjC9C;AAAAA,EACAG;AAAAA,EACAC;AAAAA,EACAH;AAMF,GAAsC;AACpC,QAAMsE,gBAAgBtE,OAAO0D,QAAQ,iCAAiC,GAChEa,aAAaC,8BAAsB;AAAA,IACvCzE,OAAO;AAAA,MACLnD,MAAMmD,MAAMnD;AAAAA,MACZD,MAAMoD,MAAMpD;AAAAA,IAAAA;AAAAA,IAEduD;AAAAA,IACAC;AAAAA,EAAAA,CACD;AACDmE,gBAAcT,QAAAA;AAEd,QAAMnG,MAAMD,QAAQC,KACd5B,kBAAkB4B,IAAI+G,kCACxB/G,IAAI+G,oCAAoC,SACxCC,CAAAA,CAAQvE,WAAWrE;AAEvB,SAAI4B,IAAIiH,0BAA0BxE,WAAWyE,SAAS/I,YACpDmE,OAAOyB,KACL,oCAAoCtB,UAAUyE,QAAQ/I,QAAQ,2CAA2C6B,IAAIiH,sBAAsB,GACrI,GAGK;AAAA,IACL,GAAGJ;AAAAA,IACHM,YAAYC,cAAAA,QAAK7C,KAAK/B,SAAS,QAAQ;AAAA,IACvCpE;AAAAA,IACAG,eAAekE,aAAa,mBAAmBA,YAAYA,UAAUlE,gBAAgB8I;AAAAA,EAAAA;AAEzF;;;;;;;;;;;;"}