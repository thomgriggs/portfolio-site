{"version":3,"file":"FormattedCode-DJTpo7zC.js","sources":["../../src/components/code/Code.tsx","../../src/components/code/FormattedCode.tsx","../../src/hooks/useLocalStorage.ts"],"sourcesContent":["import { cn } from \"../../utils/cn\";\nimport \"./code-mirror.css\";\n\nexport function Code({\n  className = \"\",\n  html\n}: {\n  className?: string;\n  html: string;\n}) {\n  return (\n    <code\n      className={cn(\n        \"text-xs md:text-sm block text-left whitespace-pre-wrap text-white! rounded-md p-3 bg-black\",\n        \"flex flex-col\",\n        className\n      )}\n      dangerouslySetInnerHTML={{ __html: html }}\n    />\n  );\n}\n","import useLocalStorage from \"../../hooks/useLocalStorage\";\nimport { cn } from \"../../utils/cn\";\nimport { Code } from \"./Code\";\n\ntype Markdown =\n  | {\n      javaScript: string;\n      typeScript?: string;\n    }\n  | {\n      html: string;\n    };\n\nexport function FormattedCode({ markdown }: { markdown: Markdown }) {\n  const [ts, setTS] = useLocalStorage(\"CodeTabs::tab\", true);\n\n  if (\"html\" in markdown) {\n    return <Code html={markdown.html} />;\n  }\n\n  const code = (\n    <Code\n      html={\n        ts ? (markdown.typeScript ?? markdown.javaScript) : markdown.javaScript\n      }\n    />\n  );\n\n  if (!markdown.typeScript) {\n    return code;\n  }\n\n  return (\n    <div className=\"relative\">\n      {code}\n      <button\n        className={cn(\n          \"absolute top-2 right-2 p-1 rounded-sm bg-white/10 cursor-pointer hover:text-sky-300 hover:bg-sky-950 text-xs flex flex-row items-center gap-1\",\n          {\n            \"text-white/50\": !ts,\n            \"text-sky-300 bg-sky-950/50\": ts\n          }\n        )}\n        onClick={() => setTS(!ts)}\n      >\n        {ts ? \"TS\" : \"JS\"}\n        <div\n          className={cn(\"w-2 h-2 rounded\", {\n            \"bg-green-400\": ts,\n            \"bg-orange-400\": !ts\n          })}\n        />\n      </button>\n    </div>\n  );\n}\n","import { useLayoutEffect, useRef, useState } from \"react\";\n\nexport default function useLocalStorage<Type>(\n  key: string,\n  defaultValue: Type\n): [value: Type, setValue: (newValue: Type) => void] {\n  const [value, setValue] = useState<Type>(() => {\n    const storedValue = localStorage.getItem(key);\n    if (storedValue != null) {\n      return JSON.parse(storedValue) as Type;\n    } else {\n      return defaultValue;\n    }\n  });\n\n  const committedValuesRef = useRef<{\n    prevValue: string | null;\n    value: string;\n  }>({\n    prevValue: null,\n    value: JSON.stringify(value)\n  });\n  useLayoutEffect(() => {\n    committedValuesRef.current.prevValue = committedValuesRef.current.value;\n    committedValuesRef.current.value = JSON.stringify(value);\n  });\n\n  // Sync changes from local storage\n  useLayoutEffect(() => {\n    const onStorage = (event: StorageEvent) => {\n      if (\n        key === event.key &&\n        event.newValue &&\n        event.newValue !== JSON.stringify(value)\n      ) {\n        setValue(JSON.parse(event.newValue));\n      }\n    };\n\n    window.addEventListener(\"storage\", onStorage);\n\n    return () => {\n      window.removeEventListener(\"storage\", onStorage);\n    };\n  }, [key, value]);\n\n  // Sync changes to local storage\n  useLayoutEffect(() => {\n    window.dispatchEvent(\n      new StorageEvent(\"storage\", {\n        key,\n        newValue: committedValuesRef.current.value || \"\",\n        oldValue: committedValuesRef.current.prevValue || \"\"\n      })\n    );\n\n    localStorage.setItem(key, committedValuesRef.current.value);\n  }, [key, value]);\n\n  return [value, setValue];\n}\n"],"names":["Code","className","html","jsx","cn","dangerouslySetInnerHTML","__html","FormattedCode","markdown","ts","setTS","key","defaultValue","value","setValue","useState","storedValue","localStorage","getItem","JSON","parse","committedValuesRef","useRef","prevValue","stringify","useLayoutEffect","current","onStorage","event","newValue","window","addEventListener","removeEventListener","dispatchEvent","StorageEvent","oldValue","setItem","useLocalStorage","code","typeScript","javaScript","jsxs","children","onClick"],"mappings":"sDAGO,SAASA,GAAKC,UACnBA,EAAY,GAAAC,KACZA,IAKA,OACEC,EAAAA,IAAC,OAAA,CACCF,UAAWG,EACT,6FACA,gBACAH,GAEFI,wBAAyB,CAAEC,OAAQJ,IAGzC,CCPO,SAASK,GAAcC,SAAEA,IAC9B,MAAOC,EAAIC,GCZb,SACEC,EACAC,GAEA,MAAOC,EAAOC,GAAYC,EAAAA,SAAe,KACvC,MAAMC,EAAcC,aAAaC,QAAQP,GACzC,OAAmB,MAAfK,EACKG,KAAKC,MAAMJ,GAEXJ,IAILS,EAAqBC,EAAAA,OAGxB,CACDC,UAAW,KACXV,MAAOM,KAAKK,UAAUX,KAuCxB,OArCAY,EAAAA,gBAAgB,KACdJ,EAAmBK,QAAQH,UAAYF,EAAmBK,QAAQb,MAClEQ,EAAmBK,QAAQb,MAAQM,KAAKK,UAAUX,KAIpDY,EAAAA,gBAAgB,KACd,MAAME,EAAaC,IAEfjB,IAAQiB,EAAMjB,KACdiB,EAAMC,UACND,EAAMC,WAAaV,KAAKK,UAAUX,IAElCC,EAASK,KAAKC,MAAMQ,EAAMC,YAM9B,OAFAC,OAAOC,iBAAiB,UAAWJ,GAE5B,KACLG,OAAOE,oBAAoB,UAAWL,KAEvC,CAAChB,EAAKE,IAGTY,EAAAA,gBAAgB,KACdK,OAAOG,cACL,IAAIC,aAAa,UAAW,CAC1BvB,MACAkB,SAAUR,EAAmBK,QAAQb,OAAS,GAC9CsB,SAAUd,EAAmBK,QAAQH,WAAa,MAItDN,aAAamB,QAAQzB,EAAKU,EAAmBK,QAAQb,QACpD,CAACF,EAAKE,IAEF,CAACA,EAAOC,EACjB,CD9CsBuB,CAAgB,iBAAiB,GAErD,GAAI,SAAU7B,EACZ,SAAOL,IAACH,EAAA,CAAKE,KAAMM,EAASN,OAG9B,MAAMoC,EACJnC,EAAAA,IAACH,EAAA,CACCE,KACEO,EAAMD,EAAS+B,YAAc/B,EAASgC,WAAchC,EAASgC,aAKnE,OAAKhC,EAAS+B,aAKZE,KAAC,MAAA,CAAIxC,UAAU,WACZyC,SAAA,CAAAJ,EACDG,EAAAA,KAAC,SAAA,CACCxC,UAAWG,EACT,gJACA,CACE,iBAAkBK,EAClB,6BAA8BA,IAGlCkC,QAAS,IAAMjC,GAAOD,GAErBiC,SAAA,CAAAjC,EAAK,KAAO,KACbN,EAAAA,IAAC,MAAA,CACCF,UAAWG,EAAG,kBAAmB,CAC/B,eAAgBK,EAChB,iBAAkBA,YApBnB6B,CA0BX"}