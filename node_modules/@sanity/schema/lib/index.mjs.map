{"version":3,"file":"index.mjs","sources":["../src/legacy/Rule.ts","../src/_exports/index.ts"],"sourcesContent":["import {\n  type CustomValidator,\n  type FieldReference,\n  type FieldRules,\n  type LocalizedValidationMessages,\n  type MediaAssetTypes,\n  type MediaValidator,\n  type Rule as IRule,\n  type RuleClass,\n  type RuleSpec,\n  type RuleSpecConstraint,\n  type RuleTypeConstraint,\n  type SchemaType,\n  type ValidationContext,\n  type ValidationMarker,\n} from '@sanity/types'\nimport {cloneDeep} from 'lodash'\n\nconst FIELD_REF = Symbol('FIELD_REF')\nconst ruleConstraintTypes: RuleTypeConstraint[] = [\n  'Array',\n  'Boolean',\n  'Date',\n  'Number',\n  'Object',\n  'String',\n]\n\n/**\n * Core Rule implementation without validation logic.\n * This is the base Rule class that can be extended with validation logic.\n *\n * @internal\n */\nexport const Rule: RuleClass = class Rule implements IRule {\n  static readonly FIELD_REF = FIELD_REF\n  static array = (def?: SchemaType): Rule => new Rule(def).type('Array')\n  static object = (def?: SchemaType): Rule => new Rule(def).type('Object')\n  static string = (def?: SchemaType): Rule => new Rule(def).type('String')\n  static number = (def?: SchemaType): Rule => new Rule(def).type('Number')\n  static boolean = (def?: SchemaType): Rule => new Rule(def).type('Boolean')\n  static dateTime = (def?: SchemaType): Rule => new Rule(def).type('Date')\n  static valueOfField = (path: string | string[]): {type: symbol; path: string | string[]} => ({\n    type: FIELD_REF,\n    path,\n  })\n\n  _type: RuleTypeConstraint | undefined = undefined\n  _level: 'error' | 'warning' | 'info' | undefined = undefined\n  _required: 'required' | 'optional' | undefined = undefined\n  _typeDef: SchemaType | undefined = undefined\n  _message: string | LocalizedValidationMessages | undefined = undefined\n  _rules: RuleSpec[] = []\n  _fieldRules: FieldRules | undefined = undefined\n\n  constructor(typeDef?: SchemaType) {\n    this._typeDef = typeDef\n    this.reset()\n  }\n\n  private _mergeRequired(next: Rule) {\n    if (this._required === 'required' || next._required === 'required') return 'required'\n    if (this._required === 'optional' || next._required === 'optional') return 'optional'\n    return undefined\n  }\n\n  // Alias to static method, since we often have access to an _instance_ of a rule but not the actual Rule class\n  valueOfField = Rule.valueOfField.bind(Rule)\n\n  error(message?: string | LocalizedValidationMessages): Rule {\n    const rule = this.clone()\n    rule._level = 'error'\n    rule._message = message || undefined\n    return rule\n  }\n\n  warning(message?: string | LocalizedValidationMessages): Rule {\n    const rule = this.clone()\n    rule._level = 'warning'\n    rule._message = message || undefined\n    return rule\n  }\n\n  info(message?: string | LocalizedValidationMessages): Rule {\n    const rule = this.clone()\n    rule._level = 'info'\n    rule._message = message || undefined\n    return rule\n  }\n\n  reset(): this {\n    this._type = this._type || undefined\n    this._rules = (this._rules || []).filter((rule) => rule.flag === 'type')\n    this._message = undefined\n    this._required = undefined\n    this._level = 'error'\n    this._fieldRules = undefined\n    return this\n  }\n\n  isRequired(): boolean {\n    return this._required === 'required'\n  }\n\n  clone(): Rule {\n    const rule = new Rule()\n    rule._type = this._type\n    rule._message = this._message\n    rule._required = this._required\n    rule._rules = cloneDeep(this._rules)\n    rule._level = this._level\n    rule._fieldRules = this._fieldRules\n    rule._typeDef = this._typeDef\n    return rule\n  }\n\n  cloneWithRules(rules: RuleSpec[]): Rule {\n    const rule = this.clone()\n    const newRules = new Set()\n    rules.forEach((curr) => {\n      if (curr.flag === 'type') {\n        rule._type = curr.constraint\n      }\n\n      newRules.add(curr.flag)\n    })\n\n    rule._rules = rule._rules\n      .filter((curr) => {\n        const disallowDuplicate = ['type', 'uri', 'email'].includes(curr.flag)\n        const isDuplicate = newRules.has(curr.flag)\n        return !(disallowDuplicate && isDuplicate)\n      })\n      .concat(rules)\n\n    return rule\n  }\n\n  merge(rule: Rule): Rule {\n    if (this._type && rule._type && this._type !== rule._type) {\n      throw new Error('merge() failed: conflicting types')\n    }\n\n    const newRule = this.cloneWithRules(rule._rules)\n    newRule._type = this._type || rule._type\n    newRule._message = this._message || rule._message\n    newRule._required = this._mergeRequired(rule)\n    newRule._level = this._level === 'error' ? rule._level : this._level\n    return newRule\n  }\n\n  // Validation flag setters\n  type(targetType: RuleTypeConstraint | Lowercase<RuleTypeConstraint>): Rule {\n    const type = `${targetType.slice(0, 1).toUpperCase()}${targetType.slice(1)}` as Capitalize<\n      typeof targetType\n    >\n\n    if (!ruleConstraintTypes.includes(type)) {\n      throw new Error(`Unknown type \"${targetType}\"`)\n    }\n\n    const rule = this.cloneWithRules([{flag: 'type', constraint: type}])\n    rule._type = type\n    return rule\n  }\n\n  all(children: Rule[]): Rule {\n    return this.cloneWithRules([{flag: 'all', constraint: children}])\n  }\n\n  either(children: Rule[]): Rule {\n    return this.cloneWithRules([{flag: 'either', constraint: children}])\n  }\n\n  // Shared rules\n  optional(): Rule {\n    const rule = this.cloneWithRules([{flag: 'presence', constraint: 'optional'}])\n    rule._required = 'optional'\n    return rule\n  }\n\n  required(): Rule {\n    const rule = this.cloneWithRules([{flag: 'presence', constraint: 'required'}])\n    rule._required = 'required'\n    return rule\n  }\n\n  custom<T = unknown>(\n    fn: CustomValidator<T>,\n    options: {bypassConcurrencyLimit?: boolean} = {},\n  ): Rule {\n    if (options.bypassConcurrencyLimit) {\n      Object.assign(fn, {bypassConcurrencyLimit: true})\n    }\n    return this.cloneWithRules([{flag: 'custom', constraint: fn as CustomValidator}])\n  }\n\n  min(len: number | string | FieldReference): Rule {\n    return this.cloneWithRules([{flag: 'min', constraint: len}])\n  }\n\n  max(len: number | string | FieldReference): Rule {\n    return this.cloneWithRules([{flag: 'max', constraint: len}])\n  }\n\n  length(len: number | FieldReference): Rule {\n    return this.cloneWithRules([{flag: 'length', constraint: len}])\n  }\n\n  valid(value: unknown | unknown[]): Rule {\n    const values = Array.isArray(value) ? value : [value]\n    return this.cloneWithRules([{flag: 'valid', constraint: values}])\n  }\n\n  // Numbers only\n  integer(): Rule {\n    return this.cloneWithRules([{flag: 'integer'}])\n  }\n\n  precision(limit: number | FieldReference): Rule {\n    return this.cloneWithRules([{flag: 'precision', constraint: limit}])\n  }\n\n  positive(): Rule {\n    return this.cloneWithRules([{flag: 'min', constraint: 0}])\n  }\n\n  negative(): Rule {\n    return this.cloneWithRules([{flag: 'lessThan', constraint: 0}])\n  }\n\n  greaterThan(num: number | FieldReference): Rule {\n    return this.cloneWithRules([{flag: 'greaterThan', constraint: num}])\n  }\n\n  lessThan(num: number | FieldReference): Rule {\n    return this.cloneWithRules([{flag: 'lessThan', constraint: num}])\n  }\n\n  // String only\n  uppercase(): Rule {\n    return this.cloneWithRules([{flag: 'stringCasing', constraint: 'uppercase'}])\n  }\n\n  lowercase(): Rule {\n    return this.cloneWithRules([{flag: 'stringCasing', constraint: 'lowercase'}])\n  }\n\n  regex(pattern: RegExp, name: string, options: {name?: string; invert?: boolean}): Rule\n  regex(pattern: RegExp, options: {name?: string; invert?: boolean}): Rule\n  regex(pattern: RegExp, name: string): Rule\n  regex(pattern: RegExp): Rule\n  regex(\n    pattern: RegExp,\n    a?: string | {name?: string; invert?: boolean},\n    b?: {name?: string; invert?: boolean},\n  ): Rule {\n    const name = typeof a === 'string' ? a : (a?.name ?? b?.name)\n    const invert = typeof a === 'string' ? false : (a?.invert ?? b?.invert)\n\n    const constraint: RuleSpecConstraint<'regex'> = {\n      pattern,\n      name,\n      invert: invert || false,\n    }\n\n    return this.cloneWithRules([{flag: 'regex', constraint}])\n  }\n\n  email(): Rule {\n    return this.cloneWithRules([{flag: 'email'}])\n  }\n\n  uri(opts?: {\n    scheme?: (string | RegExp) | Array<string | RegExp>\n    allowRelative?: boolean\n    relativeOnly?: boolean\n    allowCredentials?: boolean\n  }): Rule {\n    const optsScheme = opts?.scheme || ['http', 'https']\n    const schemes = Array.isArray(optsScheme) ? optsScheme : [optsScheme]\n\n    if (!schemes.length) {\n      throw new Error('scheme must have at least 1 scheme specified')\n    }\n\n    const constraint: RuleSpecConstraint<'uri'> = {\n      options: {\n        scheme: schemes.map((scheme) => {\n          if (!(scheme instanceof RegExp) && typeof scheme !== 'string') {\n            throw new Error('scheme must be a RegExp or a String')\n          }\n\n          return typeof scheme === 'string' ? new RegExp(`^${escapeRegex(scheme)}$`) : scheme\n        }),\n        allowRelative: opts?.allowRelative || false,\n        relativeOnly: opts?.relativeOnly || false,\n        allowCredentials: opts?.allowCredentials || false,\n      },\n    }\n\n    return this.cloneWithRules([{flag: 'uri', constraint}])\n  }\n\n  // Array only\n  unique(): Rule {\n    return this.cloneWithRules([{flag: 'unique'}])\n  }\n\n  // Objects only\n  reference(): Rule {\n    return this.cloneWithRules([{flag: 'reference'}])\n  }\n\n  fields(rules: FieldRules): Rule {\n    if (this._type !== 'Object') {\n      throw new Error('fields() can only be called on an object type')\n    }\n\n    const rule = this.cloneWithRules([])\n    rule._fieldRules = rules\n    return rule\n  }\n\n  assetRequired(): Rule {\n    const base = getBaseType(this._typeDef)\n    let assetType: 'asset' | 'image' | 'file'\n    if (base && ['image', 'file'].includes(base.name)) {\n      assetType = base.name === 'image' ? 'image' : 'file'\n    } else {\n      assetType = 'asset'\n    }\n\n    return this.cloneWithRules([{flag: 'assetRequired', constraint: {assetType}}])\n  }\n\n  media<T extends MediaAssetTypes = MediaAssetTypes>(fn: MediaValidator<T>): Rule {\n    return this.cloneWithRules([{flag: 'media', constraint: fn}])\n  }\n\n  /**\n   * The validate method is not implemented in the base Rule class.\n   * It should be implemented by extending this class or injecting validation logic.\n   */\n  async validate(\n    value: unknown,\n    options: ValidationContext & {\n      __internal?: {\n        customValidationConcurrencyLimiter?: {\n          ready: () => Promise<void>\n          release: () => void\n        }\n      }\n    },\n  ): Promise<ValidationMarker[]> {\n    throw new Error('validate() method must be implemented by extending Rule class')\n  }\n}\n\n// Helper functions\nfunction getBaseType(type: SchemaType | undefined): SchemaType | undefined {\n  return type && type.type ? getBaseType(type.type) : type\n}\n\nfunction escapeRegex(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n}\n","import {DeprecatedDefaultSchema, Schema as NamedSchema} from '../legacy/Schema'\n\nexport default DeprecatedDefaultSchema\nexport const Schema = NamedSchema\nexport {Rule} from '../legacy/Rule'\nexport {type SchemaValidationResult} from '../sanity/typedefs'\n"],"names":["Rule","NamedSchema"],"mappings":"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"}