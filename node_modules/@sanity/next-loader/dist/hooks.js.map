{"version":3,"file":"hooks.js","sources":["../src/hooks/useDraftMode.ts","../src/hooks/useIsPresentationTool.ts","../src/hooks/useIsLivePreview.ts","../src/hooks/usePresentationQuery.ts"],"sourcesContent":["import {useCallback, useSyncExternalStore} from 'react'\nimport {\n  environment,\n  environmentListeners,\n  perspective,\n  perspectiveListeners,\n  type DraftEnvironment,\n  type DraftPerspective,\n} from './context'\n\n/**\n * Reports the current draft mode environment.\n * Use it to determine how to adapt the UI based on wether:\n * - Your app is previewed in a iframe, inside Presentation Tool in a Sanity Studio.\n * - Your app is previewed in a new window, spawned from Presentation Tool in a Sanity Studio.\n * - Your app is live previewing drafts in a standalone context.\n * - Your app is previewing drafts, but not live.\n * - Your app is not previewing anything (that could be detected).\n * @public\n */\nexport function useDraftModeEnvironment(): DraftEnvironment {\n  const subscribe = useCallback((listener: () => void) => {\n    environmentListeners.add(listener)\n    return () => environmentListeners.delete(listener)\n  }, [])\n\n  return useSyncExternalStore(\n    subscribe,\n    () => environment,\n    () => 'checking',\n  )\n}\n\n/**\n * Reports the Sanity Client perspective used to fetch data in `sanityFetch` used on the page.\n * If the hook is used outside Draft Mode it will resolve to `'unknown'`.\n * If the hook is used but the `<SanityLive />` component is not present then it'll stay in `'checking'` and console warn after a timeout that it seems like you're missing the component.\n * @public\n */\nexport function useDraftModePerspective(): DraftPerspective {\n  const subscribe = useCallback((listener: () => void) => {\n    perspectiveListeners.add(listener)\n    return () => perspectiveListeners.delete(listener)\n  }, [])\n\n  return useSyncExternalStore(\n    subscribe,\n    () => perspective,\n    () => 'checking',\n  )\n}\n","import {useDraftModeEnvironment} from './useDraftMode'\n\n/**\n * Detects if the application is being previewed inside Sanity Presentation Tool.\n * Presentation Tool can open the application in an iframe, or in a new window.\n * When in this context there are some UI you usually don't want to show,\n * for example a Draft Mode toggle, or a \"Viewing draft content\" indicators, these are unnecessary and add clutter to\n * the editorial experience.\n * The hook returns `null` initially, when it's not yet sure if the application is running inside Presentation Tool,\n * then `true` if it is, and `false` otherwise.\n * @public\n */\nexport function useIsPresentationTool(): boolean | null {\n  const environment = useDraftModeEnvironment()\n  return environment === 'checking'\n    ? null\n    : environment === 'presentation-iframe' || environment === 'presentation-window'\n}\n","import {useDraftModeEnvironment} from './useDraftMode'\n\n/**\n * Detects if the application is considered to be in a \"Live Preview\" mode.\n * Live Preview means that the application is either:\n * - being previewed inside Sanity Presentation Tool\n * - being previewed in Draft Mode, with a `browserToken` given to `defineLive`, also known as \"Standalone Live Preview'\"\n * When in Live Preview mode, you typically want UI to update as new content comes in, without any manual intervention.\n * This is very different from Live Production mode, where you usually want to delay updates that might cause layout shifts,\n * to avoid interrupting the user that is consuming your content.\n * This hook lets you adapt to this difference, making sure production doesn't cause layout shifts that worsen the UX,\n * while in Live Preview mode layout shift is less of an issue and it's better for the editorial experience to auto refresh in real time.\n *\n * The hook returns `null` initially, to signal it doesn't yet know if it's live previewing or not.\n * Then `true` if it is, and `false` otherwise.\n * @public\n */\nexport function useIsLivePreview(): boolean | null {\n  const environment = useDraftModeEnvironment()\n  return environment === 'checking'\n    ? null\n    : environment === 'presentation-iframe' ||\n        environment === 'presentation-window' ||\n        environment === 'live'\n}\n","import type {ClientPerspective, ClientReturn, ContentSourceMap, QueryParams} from '@sanity/client'\nimport {stegaEncodeSourceMap} from '@sanity/client/stega'\nimport type {LoaderControllerMsg} from '@sanity/presentation-comlink'\nimport {dequal} from 'dequal/lite'\nimport {useEffect, useMemo, useReducer, useSyncExternalStore} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {\n  comlinkDataset,\n  comlinkListeners,\n  comlinkProjectId,\n  comlink as comlinkSnapshot,\n} from './context'\nimport {useDraftModePerspective} from './useDraftMode'\n\n/** @alpha */\nexport type UsePresentationQueryReturnsInactive = {\n  data: null\n  sourceMap: null\n  perspective: null\n}\n\n/** @alpha */\nexport type UsePresentationQueryReturnsActive<QueryString extends string> = {\n  data: ClientReturn<QueryString>\n  sourceMap: ContentSourceMap | null\n  perspective: ClientPerspective\n}\n\nexport type UsePresentationQueryReturns<QueryString extends string> =\n  | UsePresentationQueryReturnsInactive\n  | UsePresentationQueryReturnsActive<QueryString>\n\ntype Action<QueryString extends string> = {\n  type: 'query-change'\n  payload: UsePresentationQueryReturnsActive<QueryString>\n}\n\nfunction reducer<QueryString extends string>(\n  state: UsePresentationQueryReturns<QueryString>,\n  {type, payload}: Action<QueryString>,\n): UsePresentationQueryReturns<QueryString> {\n  switch (type) {\n    case 'query-change':\n      return dequal(state, payload)\n        ? state\n        : {\n            ...state,\n            data: dequal(state.data, payload.data)\n              ? (state.data as ClientReturn<QueryString>)\n              : payload.data,\n            sourceMap: dequal(state.sourceMap, payload.sourceMap)\n              ? (state.sourceMap as ContentSourceMap | null)\n              : payload.sourceMap,\n            perspective: dequal(state.perspective, payload.perspective)\n              ? (state.perspective as Exclude<ClientPerspective, 'raw'>)\n              : payload.perspective,\n          }\n    default:\n      return state\n  }\n}\nconst initialState: UsePresentationQueryReturnsInactive = {\n  data: null,\n  sourceMap: null,\n  perspective: null,\n}\n\nfunction subscribe(listener: () => void) {\n  comlinkListeners.add(listener)\n  return () => comlinkListeners.delete(listener)\n}\n\nconst EMPTY_QUERY_PARAMS: QueryParams = {}\nconst LISTEN_HEARTBEAT_INTERVAL = 10_000\n\n/**\n * Experimental hook that can run queries in Presentation Tool.\n * Query results are sent back over postMessage whenever the query results change.\n * It also works with optimistic updates in the studio itself, offering low latency updates.\n * It's not as low latency as the `useOptimistic` hook, but it's a good compromise for some use cases.\n * Especially until `useOptimistic` propagates edits in the Studio parent window back into the iframe.\n * @alpha\n */\nexport function usePresentationQuery<const QueryString extends string>(props: {\n  query: QueryString\n  params?: QueryParams | Promise<QueryParams>\n  stega?: boolean\n}): UsePresentationQueryReturns<QueryString> {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const {query, params = EMPTY_QUERY_PARAMS, stega = true} = props\n\n  /**\n   * Comlink forwards queries we want to run to the parent window where Presentation Tool handles it for us\n   */\n  const comlink = useSyncExternalStore(\n    subscribe,\n    () => comlinkSnapshot,\n    () => null,\n  )\n  /**\n   * The comlink events requires projectId and dataset, Presentation Tool uses it to protect against project and dataset mismatch errors.\n   * We don't want to force the consumers of the `usePresentationQuery` hook to provide these,\n   * so we set them in the component that establishes the comlink connection and propagates it to all the subscribes.\n   */\n  const projectId = useSyncExternalStore(\n    subscribe,\n    () => comlinkProjectId,\n    () => null,\n  )\n  const dataset = useSyncExternalStore(\n    subscribe,\n    () => comlinkDataset,\n    () => null,\n  )\n  /**\n   * The perspective is kept in sync with Presentation Tool's perspective, and even knows what perspective the page loaded with initially and can forward it to the Sanity Studio.\n   */\n  const perspective = useDraftModePerspective()\n  const handleQueryHeartbeat = useEffectEvent((comlink: NonNullable<typeof comlinkSnapshot>) => {\n    // Handle odd case where the comlink can take events but some data is missing\n    if (!projectId || !dataset || !perspective) {\n      // eslint-disable-next-line no-console\n      console.warn('usePresentationQuery: projectId, dataset and perspective must be set', {\n        projectId,\n        dataset,\n        perspective,\n      })\n      return\n    }\n    // Another odd case where the initial perspective states haven't resolved to the actual perspective state\n    if (perspective === 'checking' || perspective === 'unknown') {\n      return\n    }\n    comlink.post('loader/query-listen', {\n      projectId,\n      dataset,\n      perspective,\n      query,\n      params,\n      heartbeat: LISTEN_HEARTBEAT_INTERVAL,\n    })\n  })\n  const handleQueryChange = useEffectEvent(\n    (event: Extract<LoaderControllerMsg, {type: 'loader/query-change'}>['data']) => {\n      if (\n        dequal(\n          {\n            projectId,\n            dataset,\n            query,\n            params,\n          },\n          {\n            projectId: event.projectId,\n            dataset: event.dataset,\n            query: event.query,\n            params: event.params,\n          },\n        )\n      ) {\n        dispatch({\n          type: 'query-change',\n          payload: {\n            data: event.result,\n            sourceMap: event.resultSourceMap || null,\n            perspective: event.perspective,\n          },\n        })\n      }\n    },\n  )\n  useEffect(() => {\n    if (!comlink) return\n\n    const unsubscribe = comlink.on('loader/query-change', handleQueryChange)\n    const interval = setInterval(() => handleQueryHeartbeat(comlink), LISTEN_HEARTBEAT_INTERVAL)\n    return () => {\n      clearInterval(interval)\n      unsubscribe()\n    }\n  }, [comlink])\n\n  return useMemo(() => {\n    if (stega && state.sourceMap) {\n      return {\n        ...state,\n        data: stegaEncodeSourceMap(state.data, state.sourceMap, {enabled: true, studioUrl: '/'}),\n      }\n    }\n    return state\n  }, [state, stega])\n}\n"],"names":["subscribe","environment","comlink","comlinkSnapshot","perspective"],"mappings":"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"}