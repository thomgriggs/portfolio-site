import { createNode, createNodeMachine } from "@sanity/comlink";
import { setPerspectiveCookie } from "@sanity/next-loader/server-actions";
import { createCompatibilityActors } from "@sanity/presentation-comlink";
import { useRouter } from "next/navigation.js";
import { useEffect } from "react";
import { useEffectEvent } from "use-effect-event";
import { setComlinkClientConfig, setComlink } from "./context.js";
function PresentationComlink(props) {
  const { projectId, dataset, draftModeEnabled, draftModePerspective } = props, router = useRouter();
  useEffect(() => {
    setComlinkClientConfig(projectId, dataset);
  }, [dataset, projectId]);
  const handlePerspectiveChange = useEffectEvent(
    (perspective, signal) => {
      draftModeEnabled && perspective !== draftModePerspective && setPerspectiveCookie(perspective).then(() => {
        signal.aborted || router.refresh();
      }).catch((reason) => console.error("Failed to set the preview perspective cookie", reason));
    }
  );
  return useEffect(() => {
    const comlink = createNode(
      {
        name: "loaders",
        connectTo: "presentation"
      },
      createNodeMachine().provide({
        actors: createCompatibilityActors()
      })
    );
    let controller;
    comlink.on("loader/perspective", (data) => {
      controller?.abort(), controller = new AbortController(), handlePerspectiveChange(data.perspective, controller.signal);
    });
    const stop = comlink.start();
    return setComlink(comlink), () => {
      stop();
    };
  }, []), null;
}
PresentationComlink.displayName = "PresentationComlink";
export {
  PresentationComlink as default
};
//# sourceMappingURL=PresentationComlink.js.map
