"use client";
import { useCallback, useSyncExternalStore, useReducer, useMemo, useEffect } from "react";
import { environmentListeners, environment, perspectiveListeners, perspective, comlink, comlinkProjectId, comlinkDataset, comlinkListeners } from "./_chunks-es/context.js";
import { stegaEncodeSourceMap } from "@sanity/client/stega";
import { dequal } from "dequal/lite";
import { useEffectEvent } from "use-effect-event";
function useDraftModeEnvironment() {
  const subscribe2 = useCallback((listener) => (environmentListeners.add(listener), () => environmentListeners.delete(listener)), []);
  return useSyncExternalStore(
    subscribe2,
    () => environment,
    () => "checking"
  );
}
function useDraftModePerspective() {
  const subscribe2 = useCallback((listener) => (perspectiveListeners.add(listener), () => perspectiveListeners.delete(listener)), []);
  return useSyncExternalStore(
    subscribe2,
    () => perspective,
    () => "checking"
  );
}
function useIsPresentationTool() {
  const environment2 = useDraftModeEnvironment();
  return environment2 === "checking" ? null : environment2 === "presentation-iframe" || environment2 === "presentation-window";
}
function useIsLivePreview() {
  const environment2 = useDraftModeEnvironment();
  return environment2 === "checking" ? null : environment2 === "presentation-iframe" || environment2 === "presentation-window" || environment2 === "live";
}
function reducer(state, { type, payload }) {
  switch (type) {
    case "query-change":
      return dequal(state, payload) ? state : {
        ...state,
        data: dequal(state.data, payload.data) ? state.data : payload.data,
        sourceMap: dequal(state.sourceMap, payload.sourceMap) ? state.sourceMap : payload.sourceMap,
        perspective: dequal(state.perspective, payload.perspective) ? state.perspective : payload.perspective
      };
    default:
      return state;
  }
}
const initialState = {
  data: null,
  sourceMap: null,
  perspective: null
};
function subscribe(listener) {
  return comlinkListeners.add(listener), () => comlinkListeners.delete(listener);
}
const EMPTY_QUERY_PARAMS = {}, LISTEN_HEARTBEAT_INTERVAL = 1e4;
function usePresentationQuery(props) {
  const [state, dispatch] = useReducer(reducer, initialState), { query, params = EMPTY_QUERY_PARAMS, stega = !0 } = props, comlink$1 = useSyncExternalStore(
    subscribe,
    () => comlink,
    () => null
  ), projectId = useSyncExternalStore(
    subscribe,
    () => comlinkProjectId,
    () => null
  ), dataset = useSyncExternalStore(
    subscribe,
    () => comlinkDataset,
    () => null
  ), perspective2 = useDraftModePerspective(), handleQueryHeartbeat = useEffectEvent((comlink2) => {
    if (!projectId || !dataset || !perspective2) {
      console.warn("usePresentationQuery: projectId, dataset and perspective must be set", {
        projectId,
        dataset,
        perspective: perspective2
      });
      return;
    }
    perspective2 === "checking" || perspective2 === "unknown" || comlink2.post("loader/query-listen", {
      projectId,
      dataset,
      perspective: perspective2,
      query,
      params,
      heartbeat: LISTEN_HEARTBEAT_INTERVAL
    });
  }), handleQueryChange = useEffectEvent(
    (event) => {
      dequal(
        {
          projectId,
          dataset,
          query,
          params
        },
        {
          projectId: event.projectId,
          dataset: event.dataset,
          query: event.query,
          params: event.params
        }
      ) && dispatch({
        type: "query-change",
        payload: {
          data: event.result,
          sourceMap: event.resultSourceMap || null,
          perspective: event.perspective
        }
      });
    }
  );
  return useEffect(() => {
    if (!comlink$1) return;
    const unsubscribe = comlink$1.on("loader/query-change", handleQueryChange), interval = setInterval(() => handleQueryHeartbeat(comlink$1), LISTEN_HEARTBEAT_INTERVAL);
    return () => {
      clearInterval(interval), unsubscribe();
    };
  }, [comlink$1]), useMemo(() => stega && state.sourceMap ? {
    ...state,
    data: stegaEncodeSourceMap(state.data, state.sourceMap, { enabled: !0, studioUrl: "/" })
  } : state, [state, stega]);
}
export {
  useDraftModeEnvironment,
  useDraftModePerspective,
  useIsLivePreview,
  useIsPresentationTool,
  usePresentationQuery
};
//# sourceMappingURL=hooks.js.map
