{"version":3,"file":"live.js","sources":["../../src/client-components/live/SanityLive.tsx"],"sourcesContent":["import {\n  createClient,\n  type ClientPerspective,\n  type InitializedClientConfig,\n  type LiveEvent,\n  type LiveEventGoAway,\n  type SyncTag,\n} from '@sanity/client'\nimport {revalidateSyncTags as defaultRevalidateSyncTags} from '@sanity/next-loader/server-actions'\nimport {isMaybePresentation, isMaybePreviewWindow} from '@sanity/presentation-comlink'\nimport dynamic from 'next/dynamic'\nimport {useRouter} from 'next/navigation.js'\nimport {useEffect, useMemo, useRef, useState} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {setEnvironment, setPerspective} from '../../hooks/context'\nimport {isCorsOriginError} from '../../isCorsOriginError'\n\nconst PresentationComlink = dynamic(() => import('./PresentationComlink'), {ssr: false})\nconst RefreshOnMount = dynamic(() => import('./RefreshOnMount'), {ssr: false})\nconst RefreshOnFocus = dynamic(() => import('./RefreshOnFocus'), {ssr: false})\nconst RefreshOnReconnect = dynamic(() => import('./RefreshOnReconnect'), {ssr: false})\n\n/**\n * @public\n */\nexport interface SanityLiveProps\n  extends Pick<\n    InitializedClientConfig,\n    | 'projectId'\n    | 'dataset'\n    | 'apiHost'\n    | 'apiVersion'\n    | 'useProjectHostname'\n    | 'token'\n    | 'requestTagPrefix'\n  > {\n  // handleDraftModeAction: (secret: string) => Promise<void | string>\n  draftModeEnabled: boolean\n  draftModePerspective?: ClientPerspective\n  refreshOnMount?: boolean\n  refreshOnFocus?: boolean\n  refreshOnReconnect?: boolean\n  requestTag: string | undefined\n  /**\n   * Handle errors from the Live Events subscription.\n   * By default it's reported using `console.error`, you can override this prop to handle it in your own way.\n   */\n  onError?: (error: unknown) => void\n  intervalOnGoAway?: number | false\n  onGoAway?: (event: LiveEventGoAway, intervalOnGoAway: number | false) => void\n  revalidateSyncTags?: (tags: SyncTag[]) => Promise<void | 'refresh'>\n}\n\nfunction handleError(error: unknown) {\n  /* eslint-disable no-console */\n  if (isCorsOriginError(error)) {\n    console.warn(\n      `Sanity Live is unable to connect to the Sanity API as the current origin - ${window.origin} - is not in the list of allowed CORS origins for this Sanity Project.`,\n      error.addOriginUrl && `Add it here:`,\n      error.addOriginUrl?.toString(),\n    )\n  } else {\n    console.error(error)\n  }\n  /* eslint-enable no-console */\n}\n\nfunction handleOnGoAway(event: LiveEventGoAway, intervalOnGoAway: number | false) {\n  /* eslint-disable no-console */\n  if (intervalOnGoAway) {\n    console.warn(\n      'Sanity Live connection closed, switching to long polling set to a interval of',\n      intervalOnGoAway / 1000,\n      'seconds and the server gave this reason:',\n      event.reason,\n    )\n  } else {\n    console.error(\n      'Sanity Live connection closed, automatic revalidation is disabled, the server gave this reason:',\n      event.reason,\n    )\n  }\n  /* eslint-enable no-console */\n}\n\n/**\n * @public\n */\nexport function SanityLive(props: SanityLiveProps): React.JSX.Element | null {\n  const {\n    projectId,\n    dataset,\n    apiHost,\n    apiVersion,\n    useProjectHostname,\n    token,\n    requestTagPrefix,\n    // handleDraftModeAction,\n    draftModeEnabled,\n    draftModePerspective,\n    refreshOnMount = false,\n    refreshOnFocus = draftModeEnabled\n      ? false\n      : typeof window === 'undefined'\n        ? true\n        : window.self === window.top,\n    refreshOnReconnect = true,\n    intervalOnGoAway = 30_000,\n    requestTag = 'next-loader.live',\n    onError = handleError,\n    onGoAway = handleOnGoAway,\n    revalidateSyncTags = defaultRevalidateSyncTags,\n  } = props\n\n  const client = useMemo(\n    () =>\n      createClient({\n        projectId,\n        dataset,\n        apiHost,\n        apiVersion,\n        useProjectHostname,\n        ignoreBrowserTokenWarning: true,\n        token,\n        useCdn: false,\n        requestTagPrefix,\n      }),\n    [apiHost, apiVersion, dataset, projectId, requestTagPrefix, token, useProjectHostname],\n  )\n  const [longPollingInterval, setLongPollingInterval] = useState<number | false>(false)\n\n  /**\n   * 1. Handle Live Events and call revalidateTag or router.refresh when needed\n   */\n  const router = useRouter()\n  const handleLiveEvent = useEffectEvent((event: LiveEvent) => {\n    if (process.env.NODE_ENV !== 'production' && event.type === 'welcome') {\n      // eslint-disable-next-line no-console\n      console.info(\n        'Sanity is live with',\n        token\n          ? 'automatic revalidation for draft content changes as well as published content'\n          : draftModeEnabled\n            ? 'automatic revalidation for only published content. Provide a `browserToken` to `defineLive` to support draft content outside of Presentation Tool.'\n            : 'automatic revalidation of published content',\n      )\n      // Disable long polling when welcome event is received, this is a no-op if long polling is already disabled\n      setLongPollingInterval(false)\n    } else if (event.type === 'message') {\n      revalidateSyncTags(event.tags).then((result) => {\n        if (result === 'refresh') router.refresh()\n      })\n    } else if (event.type === 'restart' || event.type === 'reconnect') {\n      router.refresh()\n    } else if (event.type === 'goaway') {\n      onGoAway(event, intervalOnGoAway)\n      setLongPollingInterval(intervalOnGoAway)\n    }\n  })\n  useEffect(() => {\n    const subscription = client.live.events({includeDrafts: !!token, tag: requestTag}).subscribe({\n      next: handleLiveEvent,\n      error: (err: unknown) => {\n        // console.error('What?', err)\n        onError(err)\n      },\n    })\n    return () => subscription.unsubscribe()\n  }, [client.live, onError, requestTag, token])\n\n  /**\n   * 2. Notify what perspective we're in, when in Draft Mode\n   */\n  useEffect(() => {\n    if (draftModeEnabled && draftModePerspective) {\n      setPerspective(draftModePerspective)\n    } else {\n      setPerspective('unknown')\n    }\n  }, [draftModeEnabled, draftModePerspective])\n\n  const [loadComlink, setLoadComlink] = useState(false)\n  /**\n   * 3. Notify what environment we're in, when in Draft Mode\n   */\n  useEffect(() => {\n    // If we might be in Presentation Tool, then skip detecting here as it's handled later\n    if (isMaybePresentation()) return\n\n    // If we're definitely not in Presentation Tool, then we can set the environment as stand-alone live preview\n    // if we have both a browser token, and draft mode is enabled\n    if (draftModeEnabled && token) {\n      setEnvironment('live')\n      return\n    }\n    // If we're in draft mode, but don't have a browser token, then we're in static mode\n    // which means that published content is still live, but draft changes likely need manual refresh\n    if (draftModeEnabled) {\n      setEnvironment('static')\n      return\n    }\n\n    // Fallback to `unknown` otherwise, as we simply don't know how it's setup\n    setEnvironment('unknown')\n    return\n  }, [draftModeEnabled, token])\n\n  /**\n   * 4. If Presentation Tool is detected, load up the comlink and integrate with it\n   */\n  useEffect(() => {\n    if (!isMaybePresentation()) return\n    const controller = new AbortController()\n    // Wait for a while to see if Presentation Tool is detected, before assuming the env to be stand-alone live preview\n    const timeout = setTimeout(() => setEnvironment('live'), 3_000)\n    window.addEventListener(\n      'message',\n      ({data}: MessageEvent<unknown>) => {\n        if (\n          data &&\n          typeof data === 'object' &&\n          'domain' in data &&\n          data.domain === 'sanity/channels' &&\n          'from' in data &&\n          data.from === 'presentation'\n        ) {\n          clearTimeout(timeout)\n          setEnvironment(isMaybePreviewWindow() ? 'presentation-window' : 'presentation-iframe')\n          setLoadComlink(true)\n          controller.abort()\n        }\n      },\n      {signal: controller.signal},\n    )\n    return () => {\n      clearTimeout(timeout)\n      controller.abort()\n    }\n  }, [])\n\n  /**\n   * 5. Warn if draft mode is being disabled\n   * @TODO move logic into PresentationComlink, or maybe VisualEditing?\n   */\n  const draftModeEnabledWarnRef = useRef<ReturnType<typeof setTimeout> | undefined>(undefined)\n  useEffect(() => {\n    if (!draftModeEnabled) return\n    clearTimeout(draftModeEnabledWarnRef.current)\n    return () => {\n      draftModeEnabledWarnRef.current = setTimeout(() => {\n        // eslint-disable-next-line no-console\n        console.warn('Sanity Live: Draft mode was enabled, but is now being disabled')\n      })\n    }\n  }, [draftModeEnabled])\n\n  /**\n   * 6. Handle switching to long polling when needed\n   */\n  useEffect(() => {\n    if (!longPollingInterval) return\n    const interval = setInterval(() => router.refresh(), longPollingInterval)\n    return () => clearInterval(interval)\n  }, [longPollingInterval, router])\n\n  return (\n    <>\n      {draftModeEnabled && loadComlink && (\n        <PresentationComlink\n          projectId={projectId!}\n          dataset={dataset!}\n          // handleDraftModeAction={handleDraftModeAction}\n          draftModeEnabled={draftModeEnabled}\n          draftModePerspective={draftModePerspective!}\n        />\n      )}\n      {!draftModeEnabled && refreshOnMount && <RefreshOnMount />}\n      {!draftModeEnabled && refreshOnFocus && <RefreshOnFocus />}\n      {!draftModeEnabled && refreshOnReconnect && <RefreshOnReconnect />}\n    </>\n  )\n}\nSanityLive.displayName = 'SanityLive'\n"],"names":["revalidateSyncTags","defaultRevalidateSyncTags"],"mappings":"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"}